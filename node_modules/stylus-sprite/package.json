{
  "name": "stylus-sprite",
  "description": "Generate sprite images with Stylus",
  "version": "0.1.7",
  "author": {
    "name": "Andris Reinman"
  },
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@node.ee"
    }
  ],
  "homepage": "http://github.com/andris9/stylus-sprite",
  "repository": {
    "type": "git",
    "url": "http://github.com/andris9/stylus-sprite.git"
  },
  "main": "./stylus-sprite",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/andris9/stylus-sprite/blob/master/LICENSE"
    }
  ],
  "dependencies": {
    "node-gd": "https://github.com/fabianonunes/node-gd/tarball/master"
  },
  "engine": [
    "node >=0.3.0"
  ],
  "keywords": [
    "CSS",
    "sprite",
    "sprites",
    "images"
  ],
  "readme": "Stylus-Sprite\n=============\n\n**Stylus-Sprite** is an extension for [Stylus](https://github.com/LearnBoost/stylus) which makes sprite images from Stylus tags. \nActually it takes a image file, places it to a sprite image and replaces the original\npointer in the CSS file with position coordinates according to the sprite image.\n\nInstallation\n------------\n\n    npm install stylus-sprite\n\nDependencies\n------------\n\n  * [stylus](https://github.com/LearnBoost/stylus)\n  * [node-gd](/andris9/node-gd) - GD bindings for Node.JS. NB! Make sure you have *libgd* installed on yopur system\n\nInstall *libgd* on Mac with [homebrew](http://mxcl.github.com/homebrew/)\n \n    brew update\n    brew install libgd\n\nInstall *libgd* on Debian/Ubuntu\n\n    apt-get install libgd2-xpm-dev\n\nI had problems using node-gd on mac but on Debian it worked perfectly\n\nUsage\n-----\n\nConsider the following Stylus CSS\n\n    .block-elm\n        background: url(sprite.png) no-repeat sprite(\"star.png\");\n        width: 25px;\n        height: 25px;\n        \nAfter running Stylus-Sprite the resulting CSS would be something like\n\n    .block_elm{\n        background: url(sprite.png) no-repeat -25px -78px;\n        width: 25px;\n        height: 25px;\n    }\n\nAnd the image *sprite.png* would have *star.png* placed on position 25x78 px.\n\nSee test folder for complete example or [kreata.ee/stylus-sprite](http://kreata.ee/stylus-sprite/) for demo.\n\nCSS API\n-------\n\nFunction `sprite(filename[, options])` includes the `filename` in the sprite image and replaces `sprite(...)` with the coordinates\nof it.\n\nIf `options` param is left empty, no special behavior is added.\n\n    background-position: sprite(\"tag.png\");\n\n`options` is a string similar to html *style* param, keys and values separated with colons and key/value pairs with semicolons.\n\n    background-position: sprite(\"tag.png\",\"height: 120; repeat: x\");\n    \nPossible keys are\n\n  * `width` - width of the image on sprite, defaults to image with\n  * `height` - height of the image on sprite, defaults to image height\n  * `resize` - if `true` then resizes the image to `width` and `height` , defaults to false\n  * `valign` - if `resize` is false and `height` is bigger than image width, place the image to `top`, `middle` or `bottom`, defaults to `top`\n  * `align` - if value is `right` then X coordinate value in CSS will be set to `100%`\n  * `repeat` - if value is `x` then repeats the image from entire width of the canvas or to `limit-repeat-x` value; if value is `y` then repeats the image from current Y position to `limit-repeat-y` value; default is `no`.\n  * `limit-repeat-x` - limit the width of the repeatable area, defaults to 0 (no limit)\n  * `limit-repeat-y` - limit the height of the repeatable area, defaults to 300\n\nNB! All numeric values are plain numeric, no measurement units (defaults to pixels). \n\n\nJavaScript API\n--------------\n\nCreating the sprite consists of two phases - preparation and rendering.\n\nThe first step is to define *StylusSprite* object with required params\n\n    var sprite = new StylusSprite({\n        image_root: \"./images\",\n        output_file:\"sprite.png\"\n    });\n\nSecond step would be hooking to the Stylus parsing phase with *Stylus.define*\n\n    stylus...define('sprite', function(filename, option_val){\n            // preparation phase\n            return sprite.spritefunc(filename, option_val);\n        });\n\nA more sane version would be using bound function \n\n    sprite.spritefunc.bind(sprite, filename, option_val)\n    \nbut as Stylus checks for function parameters proxying anonymous function is needed.\n\nFinally when Stylus is finished rendering the CSS *sprite.build* must be run with it. \n\n    sprite.build(rendered_css, function(err, final_css){\n        console.log(final_css);\n    });\n\nSomewhat complete example:\n\n    var stylus = require(\"stylus\"),\n        StylusSprite = require(\"stylus-sprite\")\n        sprite = new StylusSprite({output_file:\"sprite.png\"});\n    \n    var css = \"body.....\";\n    \n    stylus(css).\n        set('filename', 'test.css').\n        define('sprite', function(filename, option_val){\n            // preparation phase\n            return sprite.spritefunc(filename, option_val);\n        }).\n        render(function(err, css){\n            if (err) throw err;\n            \n            // rendering phase\n            sprite.build(css, function(err, css){\n                if (err) throw err;\n                console.log(css);\n            });\n        });\n\n## Pngcrush\n\nIf you have [Pngcrush](http://pmt.sourceforge.net/pngcrush/) installed in your system, you can use it to optimize generated PNG images.\n\n    var sprite = new StylusSprite({\n        image_root: \"./images\",\n        output_file:\"sprite.png\",\n        pngcrush: \"pngcrush\" // path to pngcrush command\n    });",
  "_id": "stylus-sprite@0.1.7",
  "dist": {
    "shasum": "c1976ed0e09a122871f47719e4593d42d65aa6da"
  },
  "_from": "git://github.com/fabianonunes/stylus-sprite.git"
}
